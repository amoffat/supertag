/*
 * Supertag
 * Copyright (C) 2020 Andrew Moffat
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const FUSE_USE_VERSION: u32 = 21;
pub const FUSE_OPT_KEY_OPT: i32 = -1;
pub const FUSE_OPT_KEY_NONOPT: i32 = -2;
pub const FUSE_OPT_KEY_KEEP: i32 = -3;
pub const FUSE_OPT_KEY_DISCARD: i32 = -4;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_FILE_OFFSET64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const FUSE_MAJOR_VERSION: u32 = 2;
pub const FUSE_MINOR_VERSION: u32 = 9;
pub const FUSE_CAP_ASYNC_READ: u32 = 1;
pub const FUSE_CAP_POSIX_LOCKS: u32 = 2;
pub const FUSE_CAP_ATOMIC_O_TRUNC: u32 = 8;
pub const FUSE_CAP_EXPORT_SUPPORT: u32 = 16;
pub const FUSE_CAP_BIG_WRITES: u32 = 32;
pub const FUSE_CAP_DONT_MASK: u32 = 64;
pub const FUSE_CAP_SPLICE_WRITE: u32 = 128;
pub const FUSE_CAP_SPLICE_MOVE: u32 = 256;
pub const FUSE_CAP_SPLICE_READ: u32 = 512;
pub const FUSE_CAP_FLOCK_LOCKS: u32 = 1024;
pub const FUSE_CAP_IOCTL_DIR: u32 = 2048;
pub const FUSE_IOCTL_COMPAT: u32 = 1;
pub const FUSE_IOCTL_UNRESTRICTED: u32 = 2;
pub const FUSE_IOCTL_RETRY: u32 = 4;
pub const FUSE_IOCTL_DIR: u32 = 16;
pub const FUSE_IOCTL_MAX_IOV: u32 = 256;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 0;
pub const _STAT_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_LINUX: u32 = 0;
pub const _STAT_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _UTIME_H: u32 = 1;
pub const _SYS_STAT_H: u32 = 1;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _MKNOD_VER: u32 = 0;
pub const _SYS_STATVFS_H: u32 = 1;
pub const _SYS_UIO_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const UIO_MAXIOV: u32 = 1024;
pub const _SYS_STATFS_H: u32 = 1;
pub const FUSE_DEBUG_COMPAT1: u32 = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_opt {
    pub templ: *const ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_ulong,
    pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fuse_opt() {
    assert_eq!(
        ::std::mem::size_of::<fuse_opt>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_opt>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_opt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_opt>())).templ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(templ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_opt>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_opt>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_args {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub allocated: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fuse_args() {
    assert_eq!(
        ::std::mem::size_of::<fuse_args>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_args))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_args>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_args>())).argc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_args>())).argv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_args>())).allocated as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(allocated)
        )
    );
}
pub type fuse_opt_proc_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        arg: *const ::std::os::raw::c_char,
        key: ::std::os::raw::c_int,
        outargs: *mut fuse_args,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn fuse_opt_parse(
        args: *mut fuse_args,
        data: *mut ::std::os::raw::c_void,
        opts: *const fuse_opt,
        proc_: fuse_opt_proc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_opt_add_opt(
        opts: *mut *mut ::std::os::raw::c_char,
        opt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_opt_add_opt_escaped(
        opts: *mut *mut ::std::os::raw::c_char,
        opt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_opt_add_arg(
        args: *mut fuse_args,
        arg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_opt_insert_arg(
        args: *mut fuse_args,
        pos: ::std::os::raw::c_int,
        arg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_opt_free_args(args: *mut fuse_args);
}
extern "C" {
    pub fn fuse_opt_match(
        opts: *const fuse_opt,
        opt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt64_t;
pub type fsblkcnt_t = __fsblkcnt64_t;
pub type fsfilcnt_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_file_info {
    pub flags: ::std::os::raw::c_int,
    pub fh_old: ::std::os::raw::c_ulong,
    pub writepage: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub fh: u64,
    pub lock_owner: u64,
}
#[test]
fn bindgen_test_layout_fuse_file_info() {
    assert_eq!(
        ::std::mem::size_of::<fuse_file_info>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_file_info))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_file_info>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_file_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info>())).fh_old as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(fh_old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info>())).writepage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(writepage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info>())).fh as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info>())).lock_owner as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(lock_owner)
        )
    );
}
impl fuse_file_info {
    #[inline]
    pub fn direct_io(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_io(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keep_cache(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_keep_cache(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flush(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flush(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nonseekable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nonseekable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flock_release(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flock_release(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn padding(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        direct_io: ::std::os::raw::c_uint,
        keep_cache: ::std::os::raw::c_uint,
        flush: ::std::os::raw::c_uint,
        nonseekable: ::std::os::raw::c_uint,
        flock_release: ::std::os::raw::c_uint,
        padding: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let direct_io: u32 = unsafe { ::std::mem::transmute(direct_io) };
            direct_io as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let keep_cache: u32 = unsafe { ::std::mem::transmute(keep_cache) };
            keep_cache as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let flush: u32 = unsafe { ::std::mem::transmute(flush) };
            flush as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let nonseekable: u32 = unsafe { ::std::mem::transmute(nonseekable) };
            nonseekable as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let flock_release: u32 = unsafe { ::std::mem::transmute(flock_release) };
            flock_release as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let padding: u32 = unsafe { ::std::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_conn_info {
    pub proto_major: ::std::os::raw::c_uint,
    pub proto_minor: ::std::os::raw::c_uint,
    pub async_read: ::std::os::raw::c_uint,
    pub max_write: ::std::os::raw::c_uint,
    pub max_readahead: ::std::os::raw::c_uint,
    pub capable: ::std::os::raw::c_uint,
    pub want: ::std::os::raw::c_uint,
    pub max_background: ::std::os::raw::c_uint,
    pub congestion_threshold: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uint; 23usize],
}
#[test]
fn bindgen_test_layout_fuse_conn_info() {
    assert_eq!(
        ::std::mem::size_of::<fuse_conn_info>(),
        128usize,
        concat!("Size of: ", stringify!(fuse_conn_info))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_conn_info>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_conn_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).proto_major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(proto_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).proto_minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(proto_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).async_read as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(async_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).max_write as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).max_readahead as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_readahead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).capable as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(capable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).want as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(want)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).max_background as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).congestion_threshold as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(congestion_threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).reserved as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_chan {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_pollhandle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn fuse_mount(
        mountpoint: *const ::std::os::raw::c_char,
        args: *mut fuse_args,
    ) -> *mut fuse_chan;
}
extern "C" {
    pub fn fuse_unmount(mountpoint: *const ::std::os::raw::c_char, ch: *mut fuse_chan);
}
extern "C" {
    pub fn fuse_parse_cmdline(
        args: *mut fuse_args,
        mountpoint: *mut *mut ::std::os::raw::c_char,
        multithreaded: *mut ::std::os::raw::c_int,
        foreground: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_daemonize(foreground: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_pollhandle_destroy(ph: *mut fuse_pollhandle);
}
pub const fuse_buf_flags_FUSE_BUF_IS_FD: fuse_buf_flags = 2;
pub const fuse_buf_flags_FUSE_BUF_FD_SEEK: fuse_buf_flags = 4;
pub const fuse_buf_flags_FUSE_BUF_FD_RETRY: fuse_buf_flags = 8;
pub type fuse_buf_flags = u32;
pub const fuse_buf_copy_flags_FUSE_BUF_NO_SPLICE: fuse_buf_copy_flags = 2;
pub const fuse_buf_copy_flags_FUSE_BUF_FORCE_SPLICE: fuse_buf_copy_flags = 4;
pub const fuse_buf_copy_flags_FUSE_BUF_SPLICE_MOVE: fuse_buf_copy_flags = 8;
pub const fuse_buf_copy_flags_FUSE_BUF_SPLICE_NONBLOCK: fuse_buf_copy_flags = 16;
pub type fuse_buf_copy_flags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_buf {
    pub size: usize,
    pub flags: fuse_buf_flags,
    pub mem: *mut ::std::os::raw::c_void,
    pub fd: ::std::os::raw::c_int,
    pub pos: off_t,
}
#[test]
fn bindgen_test_layout_fuse_buf() {
    assert_eq!(
        ::std::mem::size_of::<fuse_buf>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_buf>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_buf>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_buf>())).mem as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_buf>())).fd as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_buf>())).pos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_bufvec {
    pub count: usize,
    pub idx: usize,
    pub off: usize,
    pub buf: [fuse_buf; 1usize],
}
#[test]
fn bindgen_test_layout_fuse_bufvec() {
    assert_eq!(
        ::std::mem::size_of::<fuse_bufvec>(),
        64usize,
        concat!("Size of: ", stringify!(fuse_bufvec))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_bufvec>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_bufvec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_bufvec>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_bufvec>())).idx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_bufvec>())).off as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_bufvec>())).buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(buf)
        )
    );
}
extern "C" {
    pub fn fuse_buf_size(bufv: *const fuse_bufvec) -> usize;
}
extern "C" {
    pub fn fuse_buf_copy(
        dst: *mut fuse_bufvec,
        src: *mut fuse_bufvec,
        flags: fuse_buf_copy_flags,
    ) -> isize;
}
extern "C" {
    pub fn fuse_set_signal_handlers(se: *mut fuse_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_remove_signal_handlers(se: *mut fuse_session);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_file_info_compat {
    pub flags: ::std::os::raw::c_int,
    pub fh: ::std::os::raw::c_ulong,
    pub writepage: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_fuse_file_info_compat() {
    assert_eq!(
        ::std::mem::size_of::<fuse_file_info_compat>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_file_info_compat))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_file_info_compat>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_file_info_compat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info_compat>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info_compat),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info_compat>())).fh as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info_compat),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info_compat>())).writepage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info_compat),
            "::",
            stringify!(writepage)
        )
    );
}
impl fuse_file_info_compat {
    #[inline]
    pub fn direct_io(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_io(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keep_cache(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_keep_cache(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        direct_io: ::std::os::raw::c_uint,
        keep_cache: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let direct_io: u32 = unsafe { ::std::mem::transmute(direct_io) };
            direct_io as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let keep_cache: u32 = unsafe { ::std::mem::transmute(keep_cache) };
            keep_cache as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn fuse_mount_compat25(
        mountpoint: *const ::std::os::raw::c_char,
        args: *mut fuse_args,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_mount_compat22(
        mountpoint: *const ::std::os::raw::c_char,
        opts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_mount_compat1(
        mountpoint: *const ::std::os::raw::c_char,
        args: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_unmount_compat22(mountpoint: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off64_t,
    pub l_len: __off64_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}open64"]
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}openat64"]
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}creat64"]
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}lockf64"]
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}posix_fadvise64"]
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __len: __off64_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}posix_fallocate64"]
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __len: __off64_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utimbuf {
    pub actime: __time_t,
    pub modtime: __time_t,
}
#[test]
fn bindgen_test_layout_utimbuf() {
    assert_eq!(
        ::std::mem::size_of::<utimbuf>(),
        16usize,
        concat!("Size of: ", stringify!(utimbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<utimbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(utimbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utimbuf>())).actime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(utimbuf),
            "::",
            stringify!(actime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utimbuf>())).modtime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(utimbuf),
            "::",
            stringify!(modtime)
        )
    );
}
extern "C" {
    pub fn utime(
        __file: *const ::std::os::raw::c_char,
        __file_times: *const utimbuf,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}stat64"]
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}fstat64"]
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}fstatat64"]
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}lstat64"]
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__fxstat64"]
    pub fn __fxstat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__xstat64"]
    pub fn __xstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__lxstat64"]
    pub fn __lxstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__fxstatat64"]
    pub fn __fxstatat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknod(
        __ver: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknodat(
        __ver: ::std::os::raw::c_int,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statvfs {
    pub f_bsize: ::std::os::raw::c_ulong,
    pub f_frsize: ::std::os::raw::c_ulong,
    pub f_blocks: __fsblkcnt64_t,
    pub f_bfree: __fsblkcnt64_t,
    pub f_bavail: __fsblkcnt64_t,
    pub f_files: __fsfilcnt64_t,
    pub f_ffree: __fsfilcnt64_t,
    pub f_favail: __fsfilcnt64_t,
    pub f_fsid: ::std::os::raw::c_ulong,
    pub f_flag: ::std::os::raw::c_ulong,
    pub f_namemax: ::std::os::raw::c_ulong,
    pub __f_spare: [::std::os::raw::c_int; 6usize],
}
#[test]
fn bindgen_test_layout_statvfs() {
    assert_eq!(
        ::std::mem::size_of::<statvfs>(),
        112usize,
        concat!("Size of: ", stringify!(statvfs))
    );
    assert_eq!(
        ::std::mem::align_of::<statvfs>(),
        8usize,
        concat!("Alignment of ", stringify!(statvfs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_bsize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_frsize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_frsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_blocks as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_bfree as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_bavail as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bavail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_files as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_ffree as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_ffree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_favail as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_favail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_fsid as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_fsid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_flag as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_namemax as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_namemax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).__f_spare as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(__f_spare)
        )
    );
}
pub const ST_RDONLY: _bindgen_ty_1 = 1;
pub const ST_NOSUID: _bindgen_ty_1 = 2;
pub type _bindgen_ty_1 = u32;
extern "C" {
    #[link_name = "\u{1}statvfs64"]
    pub fn statvfs(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut statvfs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}fstatvfs64"]
    pub fn fstatvfs(__fildes: ::std::os::raw::c_int, __buf: *mut statvfs) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}preadv64"]
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off64_t,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}pwritev64"]
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off64_t,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_cmd {
    _unused: [u8; 0],
}
pub type fuse_fill_dir_t = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        stbuf: *const stat,
        off: off_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_dirhandle {
    _unused: [u8; 0],
}
pub type fuse_dirh_t = *mut fuse_dirhandle;
pub type fuse_dirfil_t = ::std::option::Option<
    unsafe extern "C" fn(
        h: fuse_dirh_t,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        ino: ino_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_operations {
    pub getattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub readlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub getdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: fuse_dirh_t,
            arg3: fuse_dirfil_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub mknod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            arg3: dev_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub rmdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub symlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub link: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub chmod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub chown: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: uid_t,
            arg3: gid_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub truncate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub utime: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut utimbuf,
        ) -> ::std::os::raw::c_int,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub statfs: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut statvfs,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsync: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub setxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: usize,
            arg5: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub getxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_char,
            arg4: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub listxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub removexattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub opendir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub readdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_void,
            arg3: fuse_fill_dir_t,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub releasedir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsyncdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(conn: *mut fuse_conn_info) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub access: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub ftruncate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: off_t,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub fgetattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub lock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
            cmd: ::std::os::raw::c_int,
            arg3: *mut flock,
        ) -> ::std::os::raw::c_int,
    >,
    pub utimens: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            tv: *const timespec,
        ) -> ::std::os::raw::c_int,
    >,
    pub bmap: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            blocksize: usize,
            idx: *mut u64,
        ) -> ::std::os::raw::c_int,
    >,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub ioctl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            cmd: ::std::os::raw::c_int,
            arg: *mut ::std::os::raw::c_void,
            arg2: *mut fuse_file_info,
            flags: ::std::os::raw::c_uint,
            data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub poll: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
            ph: *mut fuse_pollhandle,
            reventsp: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub write_buf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            buf: *mut fuse_bufvec,
            off: off_t,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_buf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            bufp: *mut *mut fuse_bufvec,
            size: usize,
            off: off_t,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub flock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
            op: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub fallocate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: off_t,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_fuse_operations() {
    assert_eq!(
        ::std::mem::size_of::<fuse_operations>(),
        360usize,
        concat!("Size of: ", stringify!(fuse_operations))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_operations>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_operations))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).getattr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(getattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).readlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(readlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).getdir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(getdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).mknod as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(mknod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).mkdir as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).unlink as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).rmdir as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(rmdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).symlink as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(symlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).rename as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).link as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).chmod as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(chmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).chown as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(chown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).truncate as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).utime as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).open as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).read as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).write as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).statfs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(statfs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).flush as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).release as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).fsync as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(fsync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).setxattr as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(setxattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).getxattr as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(getxattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).listxattr as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(listxattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).removexattr as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(removexattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).opendir as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(opendir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).readdir as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(readdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).releasedir as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(releasedir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).fsyncdir as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(fsyncdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).init as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).destroy as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).access as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).create as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).ftruncate as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(ftruncate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).fgetattr as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(fgetattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).lock as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).utimens as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(utimens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).bmap as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(bmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).ioctl as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(ioctl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).poll as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(poll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).write_buf as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(write_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).read_buf as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(read_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).flock as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(flock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).fallocate as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(fallocate)
        )
    );
}
impl fuse_operations {
    #[inline]
    pub fn flag_nullpath_ok(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flag_nullpath_ok(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flag_nopath(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flag_nopath(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flag_utime_omit_ok(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flag_utime_omit_ok(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flag_reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_flag_reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flag_nullpath_ok: ::std::os::raw::c_uint,
        flag_nopath: ::std::os::raw::c_uint,
        flag_utime_omit_ok: ::std::os::raw::c_uint,
        flag_reserved: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let flag_nullpath_ok: u32 = unsafe { ::std::mem::transmute(flag_nullpath_ok) };
            flag_nullpath_ok as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let flag_nopath: u32 = unsafe { ::std::mem::transmute(flag_nopath) };
            flag_nopath as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let flag_utime_omit_ok: u32 = unsafe { ::std::mem::transmute(flag_utime_omit_ok) };
            flag_utime_omit_ok as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let flag_reserved: u32 = unsafe { ::std::mem::transmute(flag_reserved) };
            flag_reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_context {
    pub fuse: *mut fuse,
    pub uid: uid_t,
    pub gid: gid_t,
    pub pid: pid_t,
    pub private_data: *mut ::std::os::raw::c_void,
    pub umask: mode_t,
}
#[test]
fn bindgen_test_layout_fuse_context() {
    assert_eq!(
        ::std::mem::size_of::<fuse_context>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_context))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_context>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).fuse as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(fuse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).uid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).private_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(private_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).umask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(umask)
        )
    );
}
extern "C" {
    pub fn fuse_new(
        ch: *mut fuse_chan,
        args: *mut fuse_args,
        op: *const fuse_operations,
        op_size: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut fuse;
}
extern "C" {
    pub fn fuse_destroy(f: *mut fuse);
}
extern "C" {
    pub fn fuse_loop(f: *mut fuse) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_exit(f: *mut fuse);
}
extern "C" {
    pub fn fuse_loop_mt(f: *mut fuse) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_get_context() -> *mut fuse_context;
}
extern "C" {
    pub fn fuse_getgroups(size: ::std::os::raw::c_int, list: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_interrupted() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_invalidate(
        f: *mut fuse,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_is_lib_option(opt: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_main_real(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        op: *const fuse_operations,
        op_size: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_start_cleanup_thread(fuse: *mut fuse) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_stop_cleanup_thread(fuse: *mut fuse);
}
extern "C" {
    pub fn fuse_clean_cache(fuse: *mut fuse) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_fs {
    _unused: [u8; 0],
}
extern "C" {
    pub fn fuse_fs_getattr(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_fgetattr(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut stat,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_rename(
        fs: *mut fuse_fs,
        oldpath: *const ::std::os::raw::c_char,
        newpath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_unlink(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_rmdir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_symlink(
        fs: *mut fuse_fs,
        linkname: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_link(
        fs: *mut fuse_fs,
        oldpath: *const ::std::os::raw::c_char,
        newpath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_release(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_open(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_read(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        size: usize,
        off: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_read_buf(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        bufp: *mut *mut fuse_bufvec,
        size: usize,
        off: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_write(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_char,
        size: usize,
        off: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_write_buf(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut fuse_bufvec,
        off: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_fsync(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        datasync: ::std::os::raw::c_int,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_flush(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_statfs(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut statvfs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_opendir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_readdir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_void,
        filler: fuse_fill_dir_t,
        off: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_fsyncdir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        datasync: ::std::os::raw::c_int,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_releasedir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_create(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_lock(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
        cmd: ::std::os::raw::c_int,
        lock: *mut flock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_flock(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
        op: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_chmod(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_chown(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        uid: uid_t,
        gid: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_truncate(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        size: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_ftruncate(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        size: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_utimens(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        tv: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_access(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_readlink(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_mknod(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
        rdev: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_mkdir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_setxattr(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        size: usize,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_getxattr(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_listxattr(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        list: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_removexattr(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_bmap(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        blocksize: usize,
        idx: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_ioctl(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        cmd: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
        fi: *mut fuse_file_info,
        flags: ::std::os::raw::c_uint,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_poll(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
        ph: *mut fuse_pollhandle,
        reventsp: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_fallocate(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        offset: off_t,
        length: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_init(fs: *mut fuse_fs, conn: *mut fuse_conn_info);
}
extern "C" {
    pub fn fuse_fs_destroy(fs: *mut fuse_fs);
}
extern "C" {
    pub fn fuse_notify_poll(ph: *mut fuse_pollhandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_new(
        op: *const fuse_operations,
        op_size: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut fuse_fs;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_module {
    pub name: *const ::std::os::raw::c_char,
    pub factory: ::std::option::Option<
        unsafe extern "C" fn(args: *mut fuse_args, fs: *mut *mut fuse_fs) -> *mut fuse_fs,
    >,
    pub next: *mut fuse_module,
    pub so: *mut fusemod_so,
    pub ctr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fuse_module() {
    assert_eq!(
        ::std::mem::size_of::<fuse_module>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_module))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_module>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_module))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_module>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_module),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_module>())).factory as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_module),
            "::",
            stringify!(factory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_module>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_module),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_module>())).so as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_module),
            "::",
            stringify!(so)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_module>())).ctr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_module),
            "::",
            stringify!(ctr)
        )
    );
}
extern "C" {
    pub fn fuse_register_module(mod_: *mut fuse_module);
}
pub type fuse_processor_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut fuse, arg2: *mut fuse_cmd, arg3: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn fuse_setup(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        op: *const fuse_operations,
        op_size: usize,
        mountpoint: *mut *mut ::std::os::raw::c_char,
        multithreaded: *mut ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut fuse;
}
extern "C" {
    pub fn fuse_teardown(fuse: *mut fuse, mountpoint: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn fuse_read_cmd(f: *mut fuse) -> *mut fuse_cmd;
}
extern "C" {
    pub fn fuse_process_cmd(f: *mut fuse, cmd: *mut fuse_cmd);
}
extern "C" {
    pub fn fuse_loop_mt_proc(
        f: *mut fuse,
        proc_: fuse_processor_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_exited(f: *mut fuse) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_set_getcontext_func(
        func: ::std::option::Option<unsafe extern "C" fn() -> *mut fuse_context>,
    );
}
extern "C" {
    pub fn fuse_get_session(f: *mut fuse) -> *mut fuse_session;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_operations_compat25 {
    pub getattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub readlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub getdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: fuse_dirh_t,
            arg3: fuse_dirfil_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub mknod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            arg3: dev_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub rmdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub symlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub link: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub chmod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub chown: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: uid_t,
            arg3: gid_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub truncate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub utime: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut utimbuf,
        ) -> ::std::os::raw::c_int,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub statfs: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut statvfs,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsync: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub setxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: usize,
            arg5: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub getxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_char,
            arg4: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub listxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub removexattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub opendir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub readdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_void,
            arg3: fuse_fill_dir_t,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub releasedir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsyncdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub init: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub access: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub ftruncate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: off_t,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub fgetattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_fuse_operations_compat25() {
    assert_eq!(
        ::std::mem::size_of::<fuse_operations_compat25>(),
        280usize,
        concat!("Size of: ", stringify!(fuse_operations_compat25))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_operations_compat25>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_operations_compat25))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).getattr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(getattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).readlink as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(readlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).getdir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(getdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).mknod as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(mknod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).mkdir as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).unlink as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).rmdir as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(rmdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).symlink as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(symlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).rename as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).link as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).chmod as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(chmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).chown as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(chown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).truncate as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).utime as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).open as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).read as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).write as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).statfs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(statfs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).flush as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).release as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).fsync as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(fsync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).setxattr as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(setxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).getxattr as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(getxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).listxattr as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(listxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).removexattr as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(removexattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).opendir as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(opendir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).readdir as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(readdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).releasedir as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(releasedir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).fsyncdir as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(fsyncdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).init as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).destroy as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).access as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat25>())).create as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).ftruncate as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(ftruncate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat25>())).fgetattr as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat25),
            "::",
            stringify!(fgetattr)
        )
    );
}
extern "C" {
    pub fn fuse_new_compat25(
        fd: ::std::os::raw::c_int,
        args: *mut fuse_args,
        op: *const fuse_operations_compat25,
        op_size: usize,
    ) -> *mut fuse;
}
extern "C" {
    pub fn fuse_main_real_compat25(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        op: *const fuse_operations_compat25,
        op_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_setup_compat25(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        op: *const fuse_operations_compat25,
        op_size: usize,
        mountpoint: *mut *mut ::std::os::raw::c_char,
        multithreaded: *mut ::std::os::raw::c_int,
        fd: *mut ::std::os::raw::c_int,
    ) -> *mut fuse;
}
extern "C" {
    pub fn fuse_teardown_compat22(
        fuse: *mut fuse,
        fd: ::std::os::raw::c_int,
        mountpoint: *mut ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statfs {
    pub f_type: __fsword_t,
    pub f_bsize: __fsword_t,
    pub f_blocks: __fsblkcnt64_t,
    pub f_bfree: __fsblkcnt64_t,
    pub f_bavail: __fsblkcnt64_t,
    pub f_files: __fsfilcnt64_t,
    pub f_ffree: __fsfilcnt64_t,
    pub f_fsid: __fsid_t,
    pub f_namelen: __fsword_t,
    pub f_frsize: __fsword_t,
    pub f_flags: __fsword_t,
    pub f_spare: [__fsword_t; 4usize],
}
#[test]
fn bindgen_test_layout_statfs() {
    assert_eq!(
        ::std::mem::size_of::<statfs>(),
        120usize,
        concat!("Size of: ", stringify!(statfs))
    );
    assert_eq!(
        ::std::mem::align_of::<statfs>(),
        8usize,
        concat!("Alignment of ", stringify!(statfs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_bsize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_bsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_blocks as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_bfree as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_bfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_bavail as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_bavail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_files as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_ffree as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_ffree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_fsid as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_fsid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_namelen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_frsize as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_frsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_flags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statfs>())).f_spare as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_spare)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}statfs64"]
    pub fn statfs(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut statfs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}fstatfs64"]
    pub fn fstatfs(__fildes: ::std::os::raw::c_int, __buf: *mut statfs) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_operations_compat22 {
    pub getattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub readlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub getdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: fuse_dirh_t,
            arg3: fuse_dirfil_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub mknod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            arg3: dev_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub rmdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub symlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub link: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub chmod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub chown: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: uid_t,
            arg3: gid_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub truncate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub utime: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut utimbuf,
        ) -> ::std::os::raw::c_int,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
            arg5: *mut fuse_file_info_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
            arg5: *mut fuse_file_info_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub statfs: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut statfs,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsync: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut fuse_file_info_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub setxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: usize,
            arg5: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub getxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_char,
            arg4: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub listxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub removexattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub opendir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub readdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_void,
            arg3: fuse_fill_dir_t,
            arg4: off_t,
            arg5: *mut fuse_file_info_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub releasedir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsyncdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut fuse_file_info_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub init: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_fuse_operations_compat22() {
    assert_eq!(
        ::std::mem::size_of::<fuse_operations_compat22>(),
        248usize,
        concat!("Size of: ", stringify!(fuse_operations_compat22))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_operations_compat22>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_operations_compat22))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).getattr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(getattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).readlink as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(readlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).getdir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(getdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).mknod as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(mknod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).mkdir as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).unlink as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).rmdir as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(rmdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).symlink as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(symlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).rename as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).link as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).chmod as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(chmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).chown as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(chown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).truncate as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).utime as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).open as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).read as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).write as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).statfs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(statfs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).flush as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).release as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).fsync as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(fsync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).setxattr as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(setxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).getxattr as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(getxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).listxattr as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(listxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).removexattr as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(removexattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).opendir as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(opendir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).readdir as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(readdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).releasedir as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(releasedir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).fsyncdir as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(fsyncdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat22>())).init as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat22>())).destroy as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat22),
            "::",
            stringify!(destroy)
        )
    );
}
extern "C" {
    pub fn fuse_new_compat22(
        fd: ::std::os::raw::c_int,
        opts: *const ::std::os::raw::c_char,
        op: *const fuse_operations_compat22,
        op_size: usize,
    ) -> *mut fuse;
}
extern "C" {
    pub fn fuse_setup_compat22(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        op: *const fuse_operations_compat22,
        op_size: usize,
        mountpoint: *mut *mut ::std::os::raw::c_char,
        multithreaded: *mut ::std::os::raw::c_int,
        fd: *mut ::std::os::raw::c_int,
    ) -> *mut fuse;
}
extern "C" {
    pub fn fuse_main_real_compat22(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        op: *const fuse_operations_compat22,
        op_size: usize,
    ) -> ::std::os::raw::c_int;
}
pub type fuse_dirfil_t_compat = ::std::option::Option<
    unsafe extern "C" fn(
        h: fuse_dirh_t,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_operations_compat2 {
    pub getattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub readlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub getdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: fuse_dirh_t,
            arg3: fuse_dirfil_t_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub mknod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            arg3: dev_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub rmdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub symlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub link: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub chmod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub chown: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: uid_t,
            arg3: gid_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub truncate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub utime: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut utimbuf,
        ) -> ::std::os::raw::c_int,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub statfs: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut statfs,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsync: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub setxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: usize,
            arg5: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub getxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_char,
            arg4: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub listxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub removexattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_fuse_operations_compat2() {
    assert_eq!(
        ::std::mem::size_of::<fuse_operations_compat2>(),
        200usize,
        concat!("Size of: ", stringify!(fuse_operations_compat2))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_operations_compat2>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_operations_compat2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).getattr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(getattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat2>())).readlink as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(readlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).getdir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(getdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).mknod as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(mknod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).mkdir as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).unlink as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).rmdir as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(rmdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).symlink as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(symlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).rename as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).link as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).chmod as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(chmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).chown as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(chown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat2>())).truncate as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).utime as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).open as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).read as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).write as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).statfs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(statfs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).flush as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).release as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat2>())).fsync as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(fsync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat2>())).setxattr as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(setxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat2>())).getxattr as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(getxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat2>())).listxattr as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(listxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat2>())).removexattr as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat2),
            "::",
            stringify!(removexattr)
        )
    );
}
extern "C" {
    pub fn fuse_main_compat2(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        op: *const fuse_operations_compat2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_new_compat2(
        fd: ::std::os::raw::c_int,
        opts: *const ::std::os::raw::c_char,
        op: *const fuse_operations_compat2,
    ) -> *mut fuse;
}
extern "C" {
    pub fn fuse_setup_compat2(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        op: *const fuse_operations_compat2,
        mountpoint: *mut *mut ::std::os::raw::c_char,
        multithreaded: *mut ::std::os::raw::c_int,
        fd: *mut ::std::os::raw::c_int,
    ) -> *mut fuse;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_statfs_compat1 {
    pub block_size: ::std::os::raw::c_long,
    pub blocks: ::std::os::raw::c_long,
    pub blocks_free: ::std::os::raw::c_long,
    pub files: ::std::os::raw::c_long,
    pub files_free: ::std::os::raw::c_long,
    pub namelen: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_fuse_statfs_compat1() {
    assert_eq!(
        ::std::mem::size_of::<fuse_statfs_compat1>(),
        48usize,
        concat!("Size of: ", stringify!(fuse_statfs_compat1))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_statfs_compat1>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_statfs_compat1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_statfs_compat1>())).block_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_statfs_compat1),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_statfs_compat1>())).blocks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_statfs_compat1),
            "::",
            stringify!(blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_statfs_compat1>())).blocks_free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_statfs_compat1),
            "::",
            stringify!(blocks_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_statfs_compat1>())).files as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_statfs_compat1),
            "::",
            stringify!(files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_statfs_compat1>())).files_free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_statfs_compat1),
            "::",
            stringify!(files_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_statfs_compat1>())).namelen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_statfs_compat1),
            "::",
            stringify!(namelen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_operations_compat1 {
    pub getattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub readlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub getdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: fuse_dirh_t,
            arg3: fuse_dirfil_t_compat,
        ) -> ::std::os::raw::c_int,
    >,
    pub mknod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            arg3: dev_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub rmdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub symlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub link: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub chmod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub chown: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: uid_t,
            arg3: gid_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub truncate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub utime: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut utimbuf,
        ) -> ::std::os::raw::c_int,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub statfs: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut fuse_statfs_compat1) -> ::std::os::raw::c_int,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsync: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_fuse_operations_compat1() {
    assert_eq!(
        ::std::mem::size_of::<fuse_operations_compat1>(),
        160usize,
        concat!("Size of: ", stringify!(fuse_operations_compat1))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_operations_compat1>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_operations_compat1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).getattr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(getattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat1>())).readlink as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(readlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).getdir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(getdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).mknod as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(mknod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).mkdir as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).unlink as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).rmdir as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(rmdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).symlink as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(symlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).rename as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).link as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).chmod as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(chmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).chown as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(chown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_operations_compat1>())).truncate as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).utime as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).open as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).read as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).write as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).statfs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(statfs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).release as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations_compat1>())).fsync as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations_compat1),
            "::",
            stringify!(fsync)
        )
    );
}
extern "C" {
    pub fn fuse_new_compat1(
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        op: *const fuse_operations_compat1,
    ) -> *mut fuse;
}
extern "C" {
    pub fn fuse_main_compat1(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        op: *const fuse_operations_compat1,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fusemod_so {
    pub _address: u8,
}
